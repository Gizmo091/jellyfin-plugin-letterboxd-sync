name: 'ðŸš€ Publish'

on:
    push:
        branches: 
            - main
            - master
        paths-ignore:
            - 'README.md'

permissions:
  contents: write

env:
    DOTNET_VERSION: '6.0.x'

jobs:
    build:
        if: ${{ github.actor != 'github-actions[bot]' }}
        runs-on: ubuntu-latest
        outputs:
            release-version: ${{ steps.ged-version-changelog.outputs.release-version }}
            changelog: ${{ steps.ged-version-changelog.outputs.changelog }}
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: 'Generate Version and Changelog'
              id: ged-version-changelog
              run: |
                NPM_CONFIG_PREFIX=$HOME/.npm-global
                export PATH=$HOME/.npm-global/bin:$PATH
                
                npm install -g conventional-recommended-bump conventional-changelog-angular semver

                CUR_TAG=$(git describe --tags --abbrev=0 2>&1 || echo "v0.0.0")
                echo "CUR_TAG = $CUR_TAG"
                CUR_VERSION=${CUR_TAG#v}
                echo "CUR_VERSION = $CUR_VERSION"

                INCREMENT_LEVEL=$(conventional-recommended-bump -p angular  --tag-prefix "v")
                echo "INCREMENT_LEVEL = $INCREMENT_LEVEL"
                NEW_VERSION=$(npx semver $CUR_VERSION -i $INCREMENT_LEVEL 2>&1)
                echo "NEW_VERSION = $NEW_VERSION"
                
                CHANGELOG=$(git log $CUR_TAG..HEAD --no-merges --pretty=format:"- %s (%h)")
                echo "CHANGELOG = $CHANGELOG"

                echo "release-version=$NEW_VERSION" >> $GITHUB_OUTPUT
                printf "changelog<<EOF\n%s\nEOF\n" "$CHANGELOG" >> $GITHUB_OUTPUT

                echo "$CUR_VERSION -> $NEW_VERSION"
                echo "$CHANGELOG"

            - name: 'Update Directory.Build.props and build.yaml'
              run: |
                sed "s/<Version>.*<\/Version>/<Version>${{ steps.ged-version-changelog.outputs.release-version }}.0<\/Version>/" Directory.Build.props > Directory.Build.props.temp && mv Directory.Build.props.temp Directory.Build.props
                sed "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ steps.ged-version-changelog.outputs.release-version }}.0<\/AssemblyVersion>/" Directory.Build.props > Directory.Build.props.temp && mv Directory.Build.props.temp Directory.Build.props
                sed "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ steps.ged-version-changelog.outputs.release-version }}.0<\/FileVersion>/" Directory.Build.props > Directory.Build.props.temp && mv Directory.Build.props.temp Directory.Build.props
                sed "s/version: \".*\"/version: \"${{ steps.ged-version-changelog.outputs.release-version }}.0\"/" build.yaml  > build.yaml.temp && mv build.yaml.temp build.yaml

            - name: 'Setup .NET (${{env.DOTNET_VERSION}})'
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: ${{env.DOTNET_VERSION}}

            - name: 'Build project'
              run: |
                dotnet restore
                dotnet publish --configuration Release --output publish

            - name: 'Generate Artefacts'
              run: |
                cd publish
                zip ${{ github.event.repository.name }}-v${{ steps.ged-version-changelog.outputs.release-version }}.zip \
                HtmlAgilityPack.dll \
                LetterboxdSync.dll

            - name: 'Upload Artefacts'
              uses: actions/upload-artifact@v4
              with:
                name: ${{ github.event.repository.name }}-v${{ steps.ged-version-changelog.outputs.release-version }}
                path: publish/${{ github.event.repository.name }}-v${{ steps.ged-version-changelog.outputs.release-version }}.zip

    publish:
        name: 'publish v${{needs.build.outputs.release-version}}'
        runs-on: ubuntu-latest
        environment: prd 
        needs: build
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - uses: actions/download-artifact@v4
              with:
                name: ${{ github.event.repository.name }}-v${{ needs.build.outputs.release-version }}
                path: publish

            - name: 'Update Directory.Build.props and build.yaml'
              run: |
                sed "s/<Version>.*<\/Version>/<Version>${{ needs.build.outputs.release-version }}.0<\/Version>/" Directory.Build.props > Directory.Build.props.temp && mv Directory.Build.props.temp Directory.Build.props
                sed "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ needs.build.outputs.release-version }}.0<\/AssemblyVersion>/" Directory.Build.props > Directory.Build.props.temp && mv Directory.Build.props.temp Directory.Build.props
                sed "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ needs.build.outputs.release-version }}.0<\/FileVersion>/" Directory.Build.props > Directory.Build.props.temp && mv Directory.Build.props.temp Directory.Build.props
                sed "s/version: \".*\"/version: \"${{ needs.build.outputs.release-version }}.0\"/" build.yaml  > build.yaml.temp && mv build.yaml.temp build.yaml
            
            - name: 'Update manifest.json'
              run: |
                  TARGETABI="10.9.0.0"
                  TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

                  CHECKSUM=$(md5sum publish/${{ github.event.repository.name }}-v${{ needs.build.outputs.release-version }}.zip | awk '{print $1}')
                  SOURCE_URL="https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/download/v${{ needs.build.outputs.release-version }}/${{ github.event.repository.name }}-v${{ needs.build.outputs.release-version }}.zip"
  
                  NEW_ENTRY="{
                    "version": \"${{ needs.build.outputs.release-version }}.0\",
                    "changelog": \"${{needs.build.outputs.changelog}}\",
                    "targetAbi": \"${TARGETABI}\",
                    "sourceUrl": \"${SOURCE_URL}\",
                    "checksum": \"${CHECKSUM}\",
                    "timestamp": \"${TIMESTAMP}\"
                  }"

                  jq ".[0].versions = [${NEW_ENTRY}] + .[0].versions" manifest.json > manifest.json.temp && mv manifest.json.temp manifest.json

            - name: 'Commit Changes'
              run: |
                git config user.name "GitHub Actions"
                git config user.email "actions@github.com"
                
                git add Directory.Build.props build.yaml manifest.json
                
                git commit -m "chore(release): v${{ needs.build.outputs.release-version }}"
                git tag v${{ needs.build.outputs.release-version }}
                
                git push origin HEAD
                git push origin v${{ needs.build.outputs.release-version }}
            
            - name: 'Create Release'
              id: create-release
              uses: actions/create-release@v1
              with:
                tag_name: v${{ needs.build.outputs.release-version }}
                release_name: v${{ needs.build.outputs.release-version }}
                draft: false
                prerelease: false
                body: ${{needs.build.outputs.changelog}}
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: 'Upload Release Asset'
              uses: actions/upload-release-asset@v1
              with:
                upload_url: ${{ steps.create-release.outputs.upload_url }}
                asset_path: publish/${{ github.event.repository.name }}-v${{ needs.build.outputs.release-version }}.zip
                asset_name: ${{ github.event.repository.name }}-v${{ needs.build.outputs.release-version }}.zip
                asset_content_type: application/zip
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}